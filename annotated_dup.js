var annotated_dup =
[
    [ "Add", "structAdd.html", "structAdd" ],
    [ "AssignStatement", "classAssignStatement.html", "classAssignStatement" ],
    [ "BinaryExpr", "classBinaryExpr.html", "classBinaryExpr" ],
    [ "BindFrtExpr", "classBindFrtExpr.html", "classBindFrtExpr" ],
    [ "Block", "classBlock.html", "classBlock" ],
    [ "BlockScope", "structBlockScope.html", "structBlockScope" ],
    [ "BuiltIn", "classBuiltIn.html", "classBuiltIn" ],
    [ "Callable", "classCallable.html", "classCallable" ],
    [ "CallExpr", "classCallExpr.html", "classCallExpr" ],
    [ "CallStackFrame", "structCallStackFrame.html", "structCallStackFrame" ],
    [ "CallStatement", "classCallStatement.html", "classCallStatement" ],
    [ "Compare", "structCompare.html", "structCompare" ],
    [ "CompilerError", "classCompilerError.html", "classCompilerError" ],
    [ "CompilerException", "classCompilerException.html", "classCompilerException" ],
    [ "CompilerWarning", "classCompilerWarning.html", "classCompilerWarning" ],
    [ "ConditionalStatement", "classConditionalStatement.html", "classConditionalStatement" ],
    [ "Decorate", "structDecorate.html", "structDecorate" ],
    [ "Div", "structDiv.html", "structDiv" ],
    [ "ElseStatement", "classElseStatement.html", "classElseStatement" ],
    [ "Expression", "classExpression.html", "classExpression" ],
    [ "ForLoopArgs", "structForLoopArgs.html", "structForLoopArgs" ],
    [ "ForLoopStatement", "classForLoopStatement.html", "classForLoopStatement" ],
    [ "FuncSignature", "classFuncSignature.html", "classFuncSignature" ],
    [ "Function", "classFunction.html", "classFunction" ],
    [ "FuncType", "classFuncType.html", "classFuncType" ],
    [ "GeneralError", "classGeneralError.html", "classGeneralError" ],
    [ "GlobalFunction", "classGlobalFunction.html", "classGlobalFunction" ],
    [ "IdentifierExpr", "classIdentifierExpr.html", "classIdentifierExpr" ],
    [ "IdentifierLengthExceeded", "classIdentifierLengthExceeded.html", "classIdentifierLengthExceeded" ],
    [ "InputManager", "classInputManager.html", "classInputManager" ],
    [ "InterpreterError", "classInterpreterError.html", "classInterpreterError" ],
    [ "InterpreterVisitor", "classInterpreterVisitor.html", "classInterpreterVisitor" ],
    [ "Lexer", "classLexer.html", "classLexer" ],
    [ "LiteralExpr", "classLiteralExpr.html", "classLiteralExpr" ],
    [ "LiteralString", "structLiteralString.html", "structLiteralString" ],
    [ "LocalFunction", "classLocalFunction.html", "classLocalFunction" ],
    [ "Logical", "structLogical.html", "structLogical" ],
    [ "Mul", "structMul.html", "structMul" ],
    [ "Node", "classNode.html", "classNode" ],
    [ "OverflowWarning", "classOverflowWarning.html", "classOverflowWarning" ],
    [ "Overload", "structOverload.html", null ],
    [ "Parser", "classParser.html", "classParser" ],
    [ "ParserError", "classParserError.html", "classParserError" ],
    [ "ParserPrinter", "classParserPrinter.html", "classParserPrinter" ],
    [ "Position", "classPosition.html", "classPosition" ],
    [ "Program", "classProgram.html", "classProgram" ],
    [ "RetStatement", "classRetStatement.html", "classRetStatement" ],
    [ "Statement", "classStatement.html", "classStatement" ],
    [ "Sub", "structSub.html", "structSub" ],
    [ "TKOMInterpreter", "classTKOMInterpreter.html", "classTKOMInterpreter" ],
    [ "Token", "classToken.html", "classToken" ],
    [ "Tokenizer", "classTokenizer.html", "classTokenizer" ],
    [ "Type", "classType.html", "classType" ],
    [ "TypeCast", "structTypeCast.html", "structTypeCast" ],
    [ "Unary", "structUnary.html", "structUnary" ],
    [ "UnaryExpr", "classUnaryExpr.html", "classUnaryExpr" ],
    [ "UnexpectedToken", "classUnexpectedToken.html", "classUnexpectedToken" ],
    [ "UnterminatedString", "classUnterminatedString.html", "classUnterminatedString" ],
    [ "Variable", "structVariable.html", "structVariable" ],
    [ "VariableSignature", "classVariableSignature.html", "classVariableSignature" ],
    [ "VarRef", "structVarRef.html", "structVarRef" ],
    [ "VarType", "classVarType.html", "classVarType" ],
    [ "Visitor", "classVisitor.html", "classVisitor" ],
    [ "WhileLoopStatement", "classWhileLoopStatement.html", "classWhileLoopStatement" ]
];